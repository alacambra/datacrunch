//

start p=node:entities(type="issues"), y=node:entities(uid="year_2013")
match s2<-[:service]-te2<-[:has_te]-c2<-[:parent]-p-[:parent]->c1-[:has_te]->te1-[:service]->s1, p-[:created_on]->y
where c1<>c2 and s1 <> s2 //and id(s1)<>17289 and id(s1)<>17250 and id(s2)<>17289 and id(s2)<>17250
return s1, s2, count(s2.uid) as total
order by total DESC, s1.uid, s2.uid
limit 6;


start p=node:entities(type="issues"), y=node:entities(uid="year_2013")
match s2<-[:service]-te2<-[:has_te]-c2<-[:parent]-p-[:parent]->c1-[:has_te]->te1-[:service]->s1, p-[:created_on]->y
where te1<>te2 and c1<>c2
return s1.uid, s2.uid, count(s1.uid)
order by s1.uid, s2.uid;


start p=node:entities(type="issues") 
match te2<-[:has_te]-c2<-[:parent]-p-[:parent]->c1-[:books]->te1
where c1<>c2
return te1.uid,te2.uid
limit 10;

start c1=node:entities(type="issues"), y=node:entities(uid="year_2013")
match c1-[:has_te]->te1-[:service]->s1, c1-[:created_on]->y
with s1, count(s1.uid) as num_of_uses, sum(te1.hours) as hours_of_use
return s1, num_of_uses, hours_of_use, (hours_of_use / num_of_uses) as avg_time_of_use_per_use
order by avg_time_of_use_per_use


//services booked by a creator (same issue)
start u=node:entities(type="users")
match u-[:creates]->i-[:has_te]->te<-[:books]-u, te-[:service]->s
return s, count(s) as total
order by total DESC;


//services booked by user
start u=node:entities(type="users")
match s-[:service]-te<-[:books]-u
return s, u.login, count(u) as bookings_per_user
order by u.login DESC, s.uid;

start u=node:entities(type="users")
match s-[:service]-te<-[:books]-u
where u.login="Klaus"
return s, u.login, count(u) as bookings_per_user
order by bookings_per_user DESC;
 

//issues created by user
start u=node:entities(type="users"), y=node:entities(uid="year_2013")
match u-[:creates]->i<-[:created_on]->y
return u.login, count(u) as creations_per_user
order by creations_per_user DESC;

start u=node:entities(type="users")
match u-[:creates]->i
where i.year > 2012
return u.login, count(u) as creations_per_user
order by creations_per_user DESC;

start s=node(17249), y=node:entities(uid="year_2013")
match s<-[:service]-te<-[:books]-u, te-[:spent_on]->y
return s, u.login, count(u) as total
order by total desc


//locate tripllets services
start s=node:entities(type="service")
match s1<--te1--i--te2-->s2<--te2<--i-->te3-->s3
return s1,s2,s3


start i=node:entities(type="issues")
match s1<--te1--i, i--te2-->s2, i-->te3-->s3
where te1<>te2 and te1<>te3 and te2<>te3 and s1<>s2 and s1<>s3 and s2<>s3
return s1,s2,s3

start i=node:entities(type="issues")
match i-[:has_te]-te1-[:service]-s1, i-[:has_te]-te2-->s2, i-[:has_te]->te3-[:service]->s3
where te1<>te2 and te1<>te3 and te2<>te3 and s1<>s2 and s1<>s3 and s2<>s3
return s1,s2,s3
limit 5

start s=node:entities(type="service")
match s1<--te1--i
with s1,te1,i
match  i--te2-->s2,
where te1<>te2 and s1<>s2
with  s1,te1,i, s2,te2
match  i--te3-->s3,
where te1<>te3 and te2<>te3 and s1<>s3 and s2<>s3
return s1,s2,s3

start s=node:entities(uid="Urlaub")
match s<-[:service]-te-[has_te]-i-[:has_te]->te1-[:service]->s2
where s<>s2
return s2, count(s) as c

start s=node:entities(type="service")
match s<-[:service]-te-[has_te]-i-[:has_te]->te1-[:service]->s2
where s<>s2
return s, s2, count(s) as c
order by c

start s=node:entities(type="service"), i=node:entities(type="issues")
match s<-[:service]-te-[has_te]-i
with s, i
match i-[:has_te]->te1-[:service]->s2
where s<>s2
with s, i, s2
match i-[:has_te]->te1-[:service]->s3
where s<>s2 and s2<>s3 and s2<>s3
return s, s2, s3, count(s) as c
order by c


start issue=node:entities(type="issues")
match manager-[:creates]->issue-[:has_te]->te<-[:books]-manager
where issue.year = 2013
with issue, manager, te, manager
match te-[:service]->service
return manager.uid, manager.login, service, count(manager) as t
order by manager.login, t


start issue=node:entities(type="issues")
match manager-[:creates]->issue-[:has_te]->te<-[:books]-worker
where issue.year = 2013 and manager<>worker
with issue, manager, te, worker
match te-[:service]->service
return manager.login, worker.login, service, sum(te.hours) as h, count(manager) as t, manager.uid, worker.uid
order by manager.login, worker.login, h desc, t desc

start issue=node:entities(type="issues")
match manager-[:creates]->issue-[:has_te]->te<-[:books]-worker
where issue.year = 2013 and manager<>worker
with issue, manager, te, worker
match te-[:service]->service
return worker.login, sum(te.hours) as h, count(manager) as t, service, worker.uid
order by worker.login desc, h desc, t desc















